{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","list","title","url","author","num_comments","points","objectID","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","searchTerm","onDismiss","bind","assertThisInitialized","onSearchChange","id","updatedList","filter","item","setState","event","target","value","_this$state","react_default","a","createElement","className","App_Search","onChange","App_Table","pattern","Component","Search","_this$props","children","type","Table","_this$props2","toLowerCase","includes","map","key","href","onClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCIlCC,eAAK,CACH,CACQC,MAAO,QACPC,IAAK,sBACLC,OAAQ,eACRC,aAAc,EACdC,OAAQ,EACRC,SAAU,GAElB,CACQL,MAAM,QACNC,IAAI,uBACJC,OAAO,6BACPC,aAAa,EACbC,OAAO,EACPC,SAAS,KAanBC,cACE,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACVE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAEDQ,MAAO,CACJhB,KAAMA,EACNiB,WAAW,IAEnBR,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACjBA,EAAKY,eAAiBZ,EAAKY,eAAeF,KAApBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KARZA,yEAURa,GACF,IAAMC,EAAcX,KAAKI,MAAMhB,KAAKwB,OAAO,SAACC,GAAQ,OAAOA,EAAKnB,WAAagB,IAC7EV,KAAKc,SAAS,CAAC1B,KAAMuB,2CAEdI,GACPf,KAAKc,SAAS,CAACT,WAAYU,EAAMC,OAAOC,yCAGvC,IAAAC,EAC0BlB,KAAKI,MAAzBC,EADNa,EACMb,WAAYjB,EADlB8B,EACkB9B,KAE/B,OACE+B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cACVH,EAAAC,EAAAC,cAACE,EAAD,CACQN,MAAOZ,EACPmB,SAAUxB,KAAKS,iBAEvBU,EAAAC,EAAAC,cAACI,EAAD,CACQrC,KAAMA,EACNsC,QAASrB,EACTC,UAAWN,KAAKM,qBAhCtBqB,aAwCZC,mLACU,IAAAC,EACoC7B,KAAKJ,MAAlCqB,EADPY,EACOZ,MAAOO,EADdK,EACcL,SAAUM,EADxBD,EACwBC,SACxB,OACQX,EAAAC,EAAAC,cAAA,YACSS,EADT,IACmBX,EAAAC,EAAAC,cAAA,SACHU,KAAK,OACLd,MAAOA,EACPO,SAAUA,YAR7BG,aAcfK,mLACU,IAzDG3B,EAyDH4B,EACmCjC,KAAKJ,MAAjCR,EADP6C,EACO7C,KAAMsC,EADbO,EACaP,QAASpB,EADtB2B,EACsB3B,UACtB,OACQa,EAAAC,EAAAC,cAAA,WACPjC,EAAKwB,QA7DHP,EA6DqBqB,EA7DP,SAAAb,GAAI,OAAIA,EAAKxB,MAAM6C,cAAcC,SAAS9B,EAAW6B,kBA6DpCE,IAAI,SAAAvB,GAC9B,OACQM,EAAAC,EAAAC,cAAA,OAAKgB,IAAKxB,EAAKnB,UACPyB,EAAAC,EAAAC,cAAA,YACQF,EAAAC,EAAAC,cAAA,KAAGiB,KAAMzB,EAAKvB,KAAMuB,EAAKxB,QAEjC8B,EAAAC,EAAAC,cAAA,YAAOR,EAAKtB,QACZ4B,EAAAC,EAAAC,cAAA,YAAOR,EAAKrB,cACZ2B,EAAAC,EAAAC,cAAA,YAAOR,EAAKpB,QACZ0B,EAAAC,EAAAC,cAAA,YACQF,EAAAC,EAAAC,cAAA,UACQkB,QAAS,kBAAKjC,EAAUO,EAAKnB,WAC7BqC,KAAK,UAFb,uBAf5BJ,aA6BLhC,ICvGK6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3B,EAAAC,EAAAC,cAAC0B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0013ba37.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst list=[\n        {\n                title: 'React',\n                url: 'https://reactjs.org',\n                author: 'Jordan Walke',\n                num_comments: 3,\n                points: 4,\n                objectID: 0,\n        },\n        {\n                title:'Redux',\n                url:'https://redux.js.org',\n                author:'Dan Ambramov, Andrew Clark',\n                num_comments:2,\n                points:5,\n                objectID:1,\n        }\n]\n\n// function isSearched(searchTerm){\n//         return function(item){\n//                 // some condition which returns true or false\n//                 return item.title.toLowerCase().includes(searchTerm.toLowerCase())\n//         }\n// }\n\nconst isSearched = searchTerm => item => item.title.toLowerCase().includes(searchTerm.toLowerCase())\n\nclass App extends Component {\n        constructor(props){\n                super(props);\n\n                this.state ={\n                        list: list,\n                        searchTerm:\"\",\n                };\n                this.onDismiss = this.onDismiss.bind(this);\n                this.onSearchChange = this.onSearchChange.bind(this);\n        }\n        onDismiss(id){\n                const updatedList = this.state.list.filter((item)=>{return item.objectID !== id})\n                this.setState({list: updatedList})\n        }\n        onSearchChange(event){\n                this.setState({searchTerm: event.target.value})\n\n        }\n        render() {\n                const {searchTerm, list} = this.state;\n                const helloWorld = \"Welcome to the Road to learn React\";\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n                <Search \n                        value={searchTerm}\n                        onChange={this.onSearchChange}\n                />\n                <Table\n                        list={list}\n                        pattern={searchTerm}\n                        onDismiss={this.onDismiss}\n                />\n        </header>\n                      </div>\n    );\n  }\n}\n\nclass Search extends Component{\n        render(){\n                const {value, onChange, children} = this.props;\n                return(\n                        <form>\n                                {children} <input\n                                        type=\"text\"\n                                        value={value}\n                                        onChange={onChange}/>\n                        </form>\n                )\n        }\n}\n\nclass Table extends Component{\n        render(){\n                const {list, pattern, onDismiss} = this.props;\n                return(\n                        <div>\n                {list.filter(isSearched(pattern)).map(item => {\n                        return(\n                                <div key={item.objectID}>\n                                        <span>\n                                                <a href={item.url}>{item.title}</a>\n                                        </span>\n                                        <span>{item.author}</span>\n                                        <span>{item.num_comments}</span>\n                                        <span>{item.points}</span>\n                                        <span>\n                                                <button\n                                                        onClick={()=> onDismiss(item.objectID)}\n                                                        type=\"button\"\n                                                >\n                                                        Dismiss\n                                                </button>\n                                        </span>\n                                </div>\n                        )\n                })}\n                        </div>\n);\n        }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}